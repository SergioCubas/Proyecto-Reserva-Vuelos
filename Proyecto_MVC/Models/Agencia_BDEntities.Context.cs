//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto_MVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Agencia_BDEntities : DbContext
    {
        public Agencia_BDEntities()
            : base("name=Agencia_BDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Tb_aerolinea> Tb_aerolinea { get; set; }
        public virtual DbSet<Tb_aeropuerto> Tb_aeropuerto { get; set; }
        public virtual DbSet<Tb_asiento> Tb_asiento { get; set; }
        public virtual DbSet<Tb_avion> Tb_avion { get; set; }
        public virtual DbSet<Tb_departamento> Tb_departamento { get; set; }
        public virtual DbSet<Tb_Destino> Tb_Destino { get; set; }
        public virtual DbSet<Tb_pago> Tb_pago { get; set; }
        public virtual DbSet<Tb_pais> Tb_pais { get; set; }
        public virtual DbSet<Tb_pasajero> Tb_pasajero { get; set; }
        public virtual DbSet<Tb_reserva> Tb_reserva { get; set; }
        public virtual DbSet<Tb_vuelo> Tb_vuelo { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_ListaPasajeroPorPais_Result> usp_ListaPasajeroPorPais(string pais)
        {
            var paisParameter = pais != null ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListaPasajeroPorPais_Result>("usp_ListaPasajeroPorPais", paisParameter);
        }
    
        public virtual ObjectResult<usp_ListarAsientosDisponiblesPorRucAerolinea_Result> usp_ListarAsientosDisponiblesPorRucAerolinea(string ruc)
        {
            var rucParameter = ruc != null ?
                new ObjectParameter("ruc", ruc) :
                new ObjectParameter("ruc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarAsientosDisponiblesPorRucAerolinea_Result>("usp_ListarAsientosDisponiblesPorRucAerolinea", rucParameter);
        }
    
        public virtual ObjectResult<usp_ListarPasajeroDetallePagoPorDocumento_Result> usp_ListarPasajeroDetallePagoPorDocumento(string documento)
        {
            var documentoParameter = documento != null ?
                new ObjectParameter("documento", documento) :
                new ObjectParameter("documento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarPasajeroDetallePagoPorDocumento_Result>("usp_ListarPasajeroDetallePagoPorDocumento", documentoParameter);
        }
    
        public virtual ObjectResult<usp_ListarPasajeros_Result> usp_ListarPasajeros()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarPasajeros_Result>("usp_ListarPasajeros");
        }
    
        public virtual ObjectResult<usp_ListarPasajerosPorFechaReserva_Result> usp_ListarPasajerosPorFechaReserva(string finicio, string ffin)
        {
            var finicioParameter = finicio != null ?
                new ObjectParameter("finicio", finicio) :
                new ObjectParameter("finicio", typeof(string));
    
            var ffinParameter = ffin != null ?
                new ObjectParameter("ffin", ffin) :
                new ObjectParameter("ffin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarPasajerosPorFechaReserva_Result>("usp_ListarPasajerosPorFechaReserva", finicioParameter, ffinParameter);
        }
    
        public virtual ObjectResult<usp_ListarVuelos_Result> usp_ListarVuelos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarVuelos_Result>("usp_ListarVuelos");
        }
    
        public virtual ObjectResult<usp_ListarVuelosDeAerolineasPorFechaRegistro_Result> usp_ListarVuelosDeAerolineasPorFechaRegistro(string finicio, string ffin)
        {
            var finicioParameter = finicio != null ?
                new ObjectParameter("finicio", finicio) :
                new ObjectParameter("finicio", typeof(string));
    
            var ffinParameter = ffin != null ?
                new ObjectParameter("ffin", ffin) :
                new ObjectParameter("ffin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarVuelosDeAerolineasPorFechaRegistro_Result>("usp_ListarVuelosDeAerolineasPorFechaRegistro", finicioParameter, ffinParameter);
        }
    }
}
